generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model QUESTIONS {
  question_ID    BigInt     @id @unique(map: "question_IS_UNIQUE")
  user_id        BigInt
  idempotency_key String?    @unique
  raw_query      String     @db.Text
  refined_prompt String     @db.MediumText
  fallback_used  Int?       @default(0) @db.TinyInt
  status         String     @db.VarChar(20)
  error_message  String?    @db.Text
  created_at     DateTime?  @default(now()) @db.DateTime(0)
  updated_at     DateTime?  @default(now()) @db.DateTime(0)
  USERS          USERS      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, map: "fk_QUESTIONS_1")
  response       response[]

  @@index([user_id], map: "fk_QUESTIONS_1_idx")
}

model USERS {
  user_id    BigInt      @id @default(autoincrement())
  name       String?
  email      String      @unique
  password   String
  locale     String      @default("en") @db.VarChar(45)
  created_at DateTime    @default(now()) @db.DateTime(0)
  updated_at DateTime?   @default(now()) @db.DateTime(0)
  QUESTIONS  QUESTIONS[]
}

model response {
  response_id BigInt     @id @unique(map: "response_id_UNIQUE")
  question_id BigInt?
  text_answer String     @db.MediumText
  audio_url   String?    @db.VarChar(255)
  tts_failed  Int?       @default(0) @db.TinyInt
  created_at  DateTime?  @default(now()) @db.DateTime(0)
  QUESTIONS   QUESTIONS? @relation(fields: [question_id], references: [question_ID], onDelete: Cascade, map: "fk_response_1")

  @@index([question_id], map: "fk_response_1_idx")
}
