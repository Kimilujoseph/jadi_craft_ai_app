generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id    BigInt      @id @default(autoincrement())
  name       String?
  email      String      @unique
  password   String
  locale     String      @default("en") @db.VarChar(45)
  created_at DateTime    @default(now()) @db.DateTime(0)
  updated_at DateTime?   @default(now()) @db.DateTime(0)
  
  plan       Plan        @default(FREE)
  role       UserRole    @default(USER)

  // Relations
  chats      Chat[]
  usage      UsageTracker[]
  listings   MarketplaceListing[]
  events     Event[]
}

model Chat {
  id         BigInt    @id @default(autoincrement())
  title      String?
  userId     BigInt
  user       User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  summary    String?   @db.Text
  messages   Message[]

  @@index([userId])
}

model Message {
  id        BigInt   @id @default(autoincrement())
  chatId    BigInt
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      Role
  content   String   @db.Text
  precis    String?  @db.Text

  idempotencyKey String?  @unique
  refinedPrompt  String?  @db.Text
  audioUrl     String?
  fallbackUsed Boolean? @default(false)
  status    MessageStatus @default(COMPLETED)
  
  failures  FailureLog[]

  createdAt DateTime @default(now())

  @@index([chatId])
}

model Event {
  id               BigInt   @id @default(autoincrement())
  title            String?
  image            String? // stored file path or URL
  shortDescription String   @db.Text
  time             DateTime
  venue            String
  link             String? // optional external registration link
  userId           BigInt? // optional creator (event planner)
  user             User?   @relation(fields: [userId], references: [user_id], onDelete: SetNull)

  // PUBLISHED FLAG (added) â€” events created as unpublished by default
  published Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([time])
  @@index([published])
}


model FailureLog {
  id          BigInt      @id @default(autoincrement())
  messageId   BigInt
  message     Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  failureType FailureType
  errorCode   String?
  errorMessage String     @db.Text
  createdAt   DateTime    @default(now())

  @@index([messageId])
}

model UsageTracker {
  id             BigInt    @id @default(autoincrement())
  userId         BigInt
  user           User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
  usageType      UsageType
  count          Int       @default(0)
  cycleStartDate DateTime  @default(now())

  @@unique([userId, usageType])
}

model MarketplaceListing {
  id          String   @id @default(cuid())
  url         String
  title       String
  description String
  categories  Json     @default("[]")
  keywords    Json     @default("[]")
  status      ListingStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime?

  userId BigInt
  user   User  @relation(fields: [userId], references: [user_id], onDelete: Cascade)

  @@index([userId])
}


// --- ENUMS for structured data ---

enum Role {
  user
  assistant
}

enum Plan {
  FREE
  PAID
}

enum UserRole {
  USER
  ADMIN
  VENDOR
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  PENDING
  EXPIRED
}

enum FailureType {
  PROMPT_ORCHESTRATION
  CATEGORIZER
  LLM_PRIMARY
  LLM_FALLBACK
  TTS_SERVICE
}

enum UsageType {
  AUDIO_GENERATION
  CHAT_MESSAGES
}

enum MessageStatus {
  PROCESSING
  COMPLETED
  FAILED
}
